"use strict";
/* eslint-disable n/no-extraneous-require, no-underscore-dangle, @typescript-eslint/no-explicit-any */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyRequireHooks = exports.overrideRequireHooks = void 0;
// This is a modified version of the require hooks from Next.js
// https://github.com/vercel/next.js/blob/b04c70573ac199a9bb3ea42201e0865e610d5b67/packages/next/src/server/require-hook.ts
const module_1 = __importDefault(require("module"));
const resolveFilename = module_1.default._resolveFilename;
const requireHooks = new Map();
const overrideRequireHooks = (config) => {
    // we may have changed the working directory in the handler
    const opts = {
        paths: [process.cwd()],
    };
    requireHooks.set('default', new Map([
        ['react', require.resolve(`react`, opts)],
        ['react/jsx-runtime', require.resolve(`react/jsx-runtime`, opts)],
    ]));
    if (config.experimental.appDir) {
        requireHooks.set('next', new Map([
            ['react', require.resolve(`next/dist/compiled/react`, opts)],
            ['react/jsx-runtime', require.resolve(`next/dist/compiled/react/jsx-runtime`, opts)],
            ['react/jsx-dev-runtime', require.resolve(`next/dist/compiled/react/jsx-dev-runtime`, opts)],
            ['react-dom', require.resolve(`next/dist/compiled/react-dom/server-rendering-stub`, opts)],
            ['react-dom/client', require.resolve(`next/dist/compiled/react-dom/client`, opts)],
            ['react-dom/server', require.resolve(`next/dist/compiled/react-dom/server`, opts)],
            ['react-dom/server.browser', require.resolve(`next/dist/compiled/react-dom/server.browser`, opts)],
            ['react-dom/server.edge', require.resolve(`next/dist/compiled/react-dom/server.edge`, opts)],
            [
                'react-server-dom-webpack/client',
                require.resolve(`next/dist/compiled/react-server-dom-webpack/client`, opts),
            ],
            [
                'react-server-dom-webpack/client.edge',
                require.resolve(`next/dist/compiled/react-server-dom-webpack/client.edge`, opts),
            ],
            [
                'react-server-dom-webpack/server.edge',
                require.resolve(`next/dist/compiled/react-server-dom-webpack/server.edge`, opts),
            ],
            [
                'react-server-dom-webpack/server.node',
                require.resolve(`next/dist/compiled/react-server-dom-webpack/server.node`, opts),
            ],
            ['styled-jsx', require.resolve('styled-jsx', opts)],
            ['styled-jsx/style', require.resolve('styled-jsx/style', opts)],
        ]));
    }
    if (config.experimental.serverActions) {
        requireHooks.set('experimental', new Map([
            ['react', require.resolve(`next/dist/compiled/react-experimental`, opts)],
            ['react/jsx-runtime', require.resolve(`next/dist/compiled/react-experimental/jsx-runtime`, opts)],
            ['react/jsx-dev-runtime', require.resolve(`next/dist/compiled/react-experimental/jsx-dev-runtime`, opts)],
            ['react-dom', require.resolve(`next/dist/compiled/react-dom-experimental/server-rendering-stub`, opts)],
            ['react-dom/client', require.resolve(`next/dist/compiled/react-dom-experimental/client`, opts)],
            ['react-dom/server', require.resolve(`next/dist/compiled/react-dom-experimental/server`, opts)],
            ['react-dom/server.browser', require.resolve(`next/dist/compiled/react-dom-experimental/server.browser`, opts)],
            ['react-dom/server.edge', require.resolve(`next/dist/compiled/react-dom-experimental/server.edge`, opts)],
            [
                'react-server-dom-webpack/client',
                require.resolve(`next/dist/compiled/react-server-dom-webpack-experimental/client`, opts),
            ],
            [
                'react-server-dom-webpack/client.edge',
                require.resolve(`next/dist/compiled/react-server-dom-webpack-experimental/client.edge`, opts),
            ],
            [
                'react-server-dom-webpack/server.edge',
                require.resolve(`next/dist/compiled/react-server-dom-webpack-experimental/server.edge`, opts),
            ],
            [
                'react-server-dom-webpack/server.node',
                require.resolve(`next/dist/compiled/react-server-dom-webpack-experimental/server.node`, opts),
            ],
            ['styled-jsx', require.resolve('styled-jsx', opts)],
            ['styled-jsx/style', require.resolve('styled-jsx/style', opts)],
        ]));
    }
};
exports.overrideRequireHooks = overrideRequireHooks;
const applyRequireHooks = () => {
    // eslint-disable-next-line max-params, func-names
    ;
    module_1.default._resolveFilename = function (originalResolveFilename, hooks, request, parent, isMain, options) {
        var _a, _b, _c;
        const reactMode = (_a = process.env.__NEXT_PRIVATE_PREBUNDLED_REACT) !== null && _a !== void 0 ? _a : 'default';
        const resolvedRequest = (_c = (_b = hooks.get(reactMode)) === null || _b === void 0 ? void 0 : _b.get(request)) !== null && _c !== void 0 ? _c : request;
        return originalResolveFilename.call(module_1.default, resolvedRequest, parent, isMain, options);
        // We use `bind` here to avoid referencing outside variables to create potential memory leaks.
    }.bind(null, resolveFilename, requireHooks);
};
exports.applyRequireHooks = applyRequireHooks;
/* eslint-enable n/no-extraneous-require, no-underscore-dangle, @typescript-eslint/no-explicit-any */
