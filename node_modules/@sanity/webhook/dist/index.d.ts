import type {RequestHandler} from 'express'

export declare function assertValidRequest(request: ConnectLikeRequest, secret: string): void

export declare function assertValidSignature(
  stringifiedPayload: string,
  signature: string,
  secret: string,
): void

export declare interface ConnectLikeRequest<B = unknown> {
  headers: Record<string, string | string[] | undefined>
  body: B
}

export declare interface DecodedSignature {
  timestamp: number
  hashedPayload: string
}

export declare function decodeSignatureHeader(signaturePayload: string): DecodedSignature

export declare function encodeSignatureHeader(
  stringifiedPayload: string,
  timestamp: number,
  secret: string,
): string

export declare function isSignatureError(error: unknown): error is WebhookSignatureError

export declare function isValidRequest(request: ConnectLikeRequest, secret: string): boolean

export declare function isValidSignature(
  stringifiedPayload: string,
  signature: string,
  secret: string,
): boolean

export declare function requireSignedRequest(options: SignatureMiddlewareOptions): RequestHandler

export declare const SIGNATURE_HEADER_NAME = 'sanity-webhook-signature'

export declare interface SignatureMiddlewareOptions {
  secret: string
  parseBody?: boolean
  respondOnError?: boolean
}

export declare type WebhookSignatureError = WebhookSignatureValueError | WebhookSignatureFormatError

export declare class WebhookSignatureFormatError extends Error {
  type: string
  statusCode: number
}

export declare class WebhookSignatureValueError extends Error {
  type: string
  statusCode: number
}

export {}
