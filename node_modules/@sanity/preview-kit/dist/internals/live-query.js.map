{"version":3,"file":"live-query.js","sources":["../../src/utils.ts","../../src/no-store.ts","../../src/context.ts","../../src/LiveQuery/useLiveQuery.ts","../../src/LiveQuery/LiveQueryClientComponent.tsx"],"sourcesContent":["import type { QueryParams } from '@sanity/client'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react'\n\n/**\n * @internal\n */\nexport type QueryCacheKey = `${string}-${string}`\n/**\n * @internal\n */\nexport function getQueryCacheKey(\n  query: string,\n  params: QueryParams,\n): QueryCacheKey {\n  return `${query}-${JSON.stringify(params)}`\n}\n\n/**\n * Return params that are stable with deep equal as long as the key order is the same\n * @internal\n */\nexport function useParams(\n  params?: undefined | null | QueryParams,\n): QueryParams {\n  const stringifiedParams = useMemo(\n    () => JSON.stringify(params || {}),\n    [params],\n  )\n  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams])\n}\n\n/**\n * @internal\n */\nexport function useLoadingListenersContext(\n  ready: Set<QueryCacheKey>,\n): [QueryCacheKey[], () => void] {\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0)\n  const mountedRef = useRef(true)\n  const scheduleUpdate = useCallback(() => {\n    if (mountedRef.current) {\n      startTransition(() => forceUpdate())\n    }\n  }, [])\n  useEffect(() => {\n    mountedRef.current = true\n    scheduleUpdate()\n    return () => {\n      mountedRef.current = false\n    }\n  }, [scheduleUpdate])\n  const loadedListenersContext = useMemo(\n    () => (tick ? [...ready] : []),\n    [ready, tick],\n  )\n\n  return [loadedListenersContext, scheduleUpdate]\n}\n\nexport const DEFAULT_MAX_DOCUMENTS = 3000\nexport const DEFAULT_TAG = 'sanity.preview-kit'\n","// This is the default, fallback store, that allows using useLiveQuery without a provider.\nimport type { QueryParams } from '@sanity/client'\n\nimport type {\n  DefineListenerContext,\n  ListenerGetSnapshot,\n  ListenerSubscribe,\n} from './types'\nimport { getQueryCacheKey, type QueryCacheKey } from './utils'\n\nconst snapshots = new Map<QueryCacheKey, unknown>()\nconst deps = new Map<QueryCacheKey, number>()\n\n/**\n * @internal\n */\nexport const NoStoreContext = function defineListener<QueryResult>(\n  initialSnapshot: QueryResult,\n  query: string,\n  params: QueryParams,\n) {\n  const key = getQueryCacheKey(query, params)\n\n  // Always update the snapshot, to ensure that we have the latest value\n  snapshots.set(key, initialSnapshot)\n  // Keep track of how many dependencies are using this query, so we can know when it's safe to cleanup\n  if (!deps.has(key)) {\n    deps.set(key, 0)\n  }\n\n  const subscribe: ListenerSubscribe = () => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    deps.set(key, deps.get(key)! + 1)\n\n    return () => {\n      // Bookkeeping on how many dependencies are using this query\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      deps.set(key, deps.get(key)! - 1)\n\n      // If nothing cares about this snapshot, clean it up and free memory\n      if (deps.get(key) === 0) {\n        snapshots.delete(key)\n      }\n    }\n  }\n  const getSnapshot: ListenerGetSnapshot<QueryResult> = () =>\n    snapshots.has(key) ? (snapshots.get(key) as QueryResult) : initialSnapshot\n\n  return { subscribe, getSnapshot }\n} satisfies DefineListenerContext\n","import { createContext } from 'react'\n\nimport { NoStoreContext } from './no-store'\nimport { DefineListenerContext } from './types'\nimport { QueryCacheKey } from './utils'\n\n/**\n * @internal\n */\nexport const defineListenerContext =\n  createContext<DefineListenerContext>(NoStoreContext)\n\n/**\n * If it's `null` then the listener should be treated as `success`, otherwise if a listener isn't in the array it should be considered as `loading`\n * @internal\n */\nexport const LoadedListenersContext = createContext<QueryCacheKey[] | null>(\n  null,\n)\n\n/**\n * Aids in debugging, notifying if the parent has a GroqStoreProvider, or a LiveStoreProvider, and is thus `live`.\n * This is helpful as the `useLiveQuery` hook itself works even if no provider is present, but it will not be `live`.\n * @internal\n */\nexport const IsEnabledContext = createContext<boolean>(false)\n","// This is a smaller version of `useLiveQuery`, as `LiveQuery` doesn't\n// need the more advanced features `useLiveQuery`, like the `isEqual` option or the `loading` state\n\nimport type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport {\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n  useSyncExternalStore,\n} from 'react'\n\nimport { defineListenerContext } from '../context'\nimport { useParams } from '../utils'\n\n// Re-export types we use that are needed externally\nexport type { ClientQueryParams }\n\n/** @public */\nexport function useLiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  initialData: QueryResult,\n  query: string,\n  queryParams2?: QueryParams,\n): QueryResult {\n  const defineStore = useContext(defineListenerContext)\n  const queryParams = useParams(queryParams2)\n  const store = useMemo(\n    () => defineStore<QueryResult>(initialData, query, queryParams),\n    [defineStore, initialData, queryParams, query],\n  )\n  // initialSnapshot might change before hydration is done, so deep cloning it on the first hook call\n  // helps ensure that we don't get a mismatch between the server and client snapshots\n  const [serverSnapshot] = useState(() => {\n    if (initialData === undefined) {\n      throw new Error(\n        `initialSnapshot can't be undefined, if you don't want an initial value use null instead`,\n      )\n    }\n    try {\n      return JSON.parse(JSON.stringify(initialData))\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable\",\n        { initialSnapshot: initialData, error },\n      )\n      return initialData\n    }\n  })\n  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot])\n\n  return useSyncExternalStore(\n    store.subscribe,\n    store.getSnapshot,\n    getServerSnapshot,\n  )\n}\n","import type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport type { PropsWithChildren } from 'react'\nimport { Children, cloneElement, isValidElement } from 'react'\n\nimport { useLiveQuery } from './useLiveQuery'\n\nexport type { ClientQueryParams }\n\n/** @public */\nexport type LiveQueryClientComponentProps<QueryResult, QueryParams> =\n  PropsWithChildren<{\n    initialData: QueryResult\n    query: string\n    params?: QueryParams | undefined\n  }>\n\n// Browser-only preview component, overwrites the data prop with live data on-demand\nexport default function LiveQueryClientComponent<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  props: LiveQueryClientComponentProps<QueryResult, QueryParams>,\n): React.JSX.Element {\n  const { initialData, query, params, children } = props\n  const data = useLiveQuery<QueryResult, QueryParams>(\n    initialData,\n    query,\n    params,\n  )\n\n  return <Slot data={data}>{children}</Slot>\n}\nLiveQueryClientComponent.displayName = 'LiveQuery'\n\n/**\n * Original source for `Slot` is `@radix-ui/react-slot`: https://github.com/radix-ui/primitives/blob/3e0642e40038386d58da9fb1d812c2fbfe9f67c1/packages/react/slot/src/Slot.tsx\n * It's copied and modified here as the original doesn't override the props on children, which would require us to use this pattern:\n * ```<LiveQuery initialData={data}><Posts /></LiveQuery>```\n * However, we want to use this pattern as it preserves the same type safety as before live queries are added:\n * ```<LiveQuery initialData={data}><Posts data={data} /></LiveQuery>```\n *\n * It also made sense to modify the original as our use case is smaller than radix, for example we don't have to worry about merging `style` props\n */\n\ninterface SlotProps {\n  children: React.ReactNode\n  // eslint-disable-next-line no-warning-comments\n  // @TODO support better typings\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any\n}\n\nconst Slot = (props: SlotProps) => {\n  const { children, data, ...slotProps } = props\n\n  if (isValidElement(children)) {\n    return cloneElement(children, {\n      ...slotProps,\n      ...children.props,\n      // all child props should override, except for `data`\n      data,\n      // eslint-disable-next-line no-warning-comments\n      // @ts-expect-error -- @todo fix the typings\n      ref: children.ref,\n    })\n  }\n\n  return Children.count(children) > 1 ? Children.only(null) : null\n}\nSlot.displayName = 'Slot'\n"],"names":["getQueryCacheKey","query","params","concat","JSON","stringify","useParams","stringifiedParams","useMemo","parse","snapshots","Map","deps","NoStoreContext","defineListener","initialSnapshot","key","set","has","subscribe","get","delete","getSnapshot","defineListenerContext","createContext","useLiveQuery","initialData","queryParams2","defineStore","useContext","queryParams","store","serverSnapshot","useState","Error","error","console","warn","getServerSnapshot","useCallback","useSyncExternalStore","LiveQueryClientComponent","props","children","data","jsx","Slot","displayName","slotProps","isValidElement","cloneElement","ref","Children","count","only"],"mappings":"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"}