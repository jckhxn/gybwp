import { jsx } from 'react/jsx-runtime';
import { useMemo, createContext, useContext, useState, useCallback, useSyncExternalStore, isValidElement, cloneElement, Children } from 'react';
function getQueryCacheKey(query, params) {
  return "".concat(query, "-").concat(JSON.stringify(params));
}
function useParams(params) {
  const stringifiedParams = useMemo(() => JSON.stringify(params || {}), [params]);
  return useMemo(() => JSON.parse(stringifiedParams), [stringifiedParams]);
}
const snapshots = /* @__PURE__ */new Map();
const deps = /* @__PURE__ */new Map();
const NoStoreContext = function defineListener(initialSnapshot, query, params) {
  const key = getQueryCacheKey(query, params);
  snapshots.set(key, initialSnapshot);
  if (!deps.has(key)) {
    deps.set(key, 0);
  }
  const subscribe = () => {
    deps.set(key, deps.get(key) + 1);
    return () => {
      deps.set(key, deps.get(key) - 1);
      if (deps.get(key) === 0) {
        snapshots.delete(key);
      }
    };
  };
  const getSnapshot = () => snapshots.has(key) ? snapshots.get(key) : initialSnapshot;
  return {
    subscribe,
    getSnapshot
  };
};
const defineListenerContext = createContext(NoStoreContext);
createContext(null);
createContext(false);
function useLiveQuery(initialData, query, queryParams2) {
  const defineStore = useContext(defineListenerContext);
  const queryParams = useParams(queryParams2);
  const store = useMemo(() => defineStore(initialData, query, queryParams), [defineStore, initialData, queryParams, query]);
  const [serverSnapshot] = useState(() => {
    if (initialData === void 0) {
      throw new Error("initialSnapshot can't be undefined, if you don't want an initial value use null instead");
    }
    try {
      return JSON.parse(JSON.stringify(initialData));
    } catch (error) {
      console.warn("Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable", {
        initialSnapshot: initialData,
        error
      });
      return initialData;
    }
  });
  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot]);
  return useSyncExternalStore(store.subscribe, store.getSnapshot, getServerSnapshot);
}
function LiveQueryClientComponent(props) {
  const {
    initialData,
    query,
    params,
    children
  } = props;
  const data = useLiveQuery(initialData, query, params);
  return /* @__PURE__ */jsx(Slot, {
    data,
    children
  });
}
LiveQueryClientComponent.displayName = "LiveQuery";
const Slot = props => {
  const {
    children,
    data,
    ...slotProps
  } = props;
  if (isValidElement(children)) {
    return cloneElement(children, {
      ...slotProps,
      ...children.props,
      // all child props should override, except for `data`
      data,
      // eslint-disable-next-line no-warning-comments
      // @ts-expect-error -- @todo fix the typings
      ref: children.ref
    });
  }
  return Children.count(children) > 1 ? Children.only(null) : null;
};
Slot.displayName = "Slot";
export { LiveQueryClientComponent as default };
//# sourceMappingURL=live-query.js.map
