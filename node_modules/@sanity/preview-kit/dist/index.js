import { useContext, useMemo, useState, useCallback, memo, useEffect, Suspense, lazy } from 'react';
import isFastEqual from 'react-fast-compare';
import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector';
import { defineListenerContext, useParams, LoadedListenersContext, getQueryCacheKey, IsEnabledContext, DEFAULT_TAG, DEFAULT_MAX_DOCUMENTS } from './_chunks/context-84Dd8ivc.js';
import { jsx } from 'react/jsx-runtime';
function useLiveQuery(initialData, query, queryParams, options) {
  const {
    isEqual = isFastEqual
  } = options || {};
  const defineStore = useContext(defineListenerContext);
  const params = useParams(queryParams);
  const store = useMemo(() => defineStore(initialData, query, params), [defineStore, initialData, params, query]);
  const [serverSnapshot] = useState(() => {
    if (initialData === void 0) {
      throw new Error("initialSnapshot can't be undefined, if you don't want an initial value use null instead");
    }
    try {
      return JSON.parse(JSON.stringify(initialData));
    } catch (error) {
      console.warn("Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable", {
        initialSnapshot: initialData,
        error
      });
      return initialData;
    }
  });
  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot]);
  const selector = useCallback(snapshot2 => snapshot2, []);
  const snapshot = useSyncExternalStoreWithSelector(store.subscribe, store.getSnapshot, getServerSnapshot, selector, isEqual);
  const loading = useLiveQueryIsLoading(query, params);
  return [snapshot, loading];
}
function useLiveQueryIsLoading(query, params) {
  const loadedListeners = useContext(LoadedListenersContext);
  const key = useMemo(() => getQueryCacheKey(query, params), [params, query]);
  return useMemo(() => {
    if (Array.isArray(loadedListeners)) {
      return loadedListeners.includes(key) ? false : true;
    }
    return false;
  }, [key, loadedListeners]);
}
function useIsEnabled() {
  return useContext(IsEnabledContext);
}
function createLiveQueryProvider(options) {
  const {
    GroqStoreProvider,
    LiveStoreProvider
  } = options;
  const SelectStoreProvider = memo(props => {
    var _a;
    const {
      children,
      refreshInterval,
      client,
      cache,
      logger
    } = props;
    const maxDocuments = (_a = cache == null ? void 0 : cache.maxDocuments) != null ? _a : DEFAULT_MAX_DOCUMENTS;
    const [documentsCount, setDocumentsCount] = useState(null);
    const [error, setError] = useState(null);
    const [includeTypes] = useState(() => {
      var _a2;
      return (_a2 = cache == null ? void 0 : cache.includeTypes) != null ? _a2 : [];
    });
    if (error) {
      throw error;
    }
    useEffect(() => {
      if (documentsCount !== null) {
        return;
      }
      logger == null ? void 0 : logger.log("[@sanity/preview-kit]: fetch documents count");
      const controller = new AbortController();
      client.fetch(includeTypes.length > 0 ? "count(*[_type in $includeTypes])" : "count(*)", {
        includeTypes
      }, {
        filterResponse: true,
        signal: controller.signal
      }).then(result => {
        logger == null ? void 0 : logger.log("[@sanity/preview-kit]: documents count", result);
        setDocumentsCount(result);
      }).catch(error2 => {
        if (error2.name !== "AbortError") {
          setError(error2);
        }
      });
      return () => {
        controller.abort();
      };
    }, [client, documentsCount, includeTypes, logger]);
    if (documentsCount === null) {
      return children;
    }
    if (refreshInterval && documentsCount >= maxDocuments) {
      return /* @__PURE__ */jsx(Suspense, {
        fallback: children,
        children: /* @__PURE__ */jsx(LiveStoreProvider, {
          client,
          refreshInterval,
          turboSourceMap: false,
          logger,
          children
        })
      });
    }
    if (documentsCount >= maxDocuments) {
      throw new Error("[@sanity/preview-kit]: You have ".concat(documentsCount, " documents in your dataset, which is more than the maximum of ").concat(maxDocuments, " documents. Please reduce the number of documents in your dataset or increase the limit."));
    }
    return /* @__PURE__ */jsx(Suspense, {
      fallback: children,
      children: /* @__PURE__ */jsx(GroqStoreProvider, {
        ...props,
        children
      })
    });
  });
  SelectStoreProvider.displayName = "SelectStoreProvider";
  const LiveQueryProvider = memo(props => {
    const {
      children,
      refreshInterval = 1e4,
      token
    } = props;
    if (!props.client) {
      throw new Error("Missing a `client` prop with a configured Sanity client instance");
    }
    const [client] = useState(() => {
      const {
        requestTagPrefix,
        resultSourceMap
      } = props.client.config();
      return props.client.withConfig({
        requestTagPrefix: requestTagPrefix || DEFAULT_TAG,
        resultSourceMap: resultSourceMap || "withKeyArraySelector",
        // Set the recommended defaults, this is a convenience to make it easier to share a client config from a server component to the client component
        ...(token && {
          token,
          useCdn: false,
          perspective: "previewDrafts",
          ignoreBrowserTokenWarning: true
        })
      });
    });
    const [cache] = useState(() => props.cache);
    const [logger] = useState(() => props.logger);
    const turboSourceMap = useMemo(() => {
      var _a;
      const {
        resultSourceMap
      } = client.config();
      return (_a = props.turboSourceMap) != null ? _a : resultSourceMap === "withKeyArraySelector" || resultSourceMap;
    }, [client, props.turboSourceMap]);
    if (turboSourceMap) {
      return /* @__PURE__ */jsx(Suspense, {
        fallback: children,
        children: /* @__PURE__ */jsx(LiveStoreProvider, {
          client,
          logger,
          refreshInterval,
          turboSourceMap,
          children
        })
      });
    }
    return /* @__PURE__ */jsx(Suspense, {
      fallback: children,
      children: /* @__PURE__ */jsx(SelectStoreProvider, {
        client,
        cache,
        logger,
        refreshInterval,
        children
      })
    });
  });
  LiveQueryProvider.displayName = "LiveQueryProvider";
  return LiveQueryProvider;
}
const GroqStoreProvider = lazy(() => import('./_chunks/index-nUf8MZeB.js'));
const LiveStoreProvider = lazy(() => import('./_chunks/index-qPm-_dZE.js'));
const LiveQueryProvider = createLiveQueryProvider({
  GroqStoreProvider,
  LiveStoreProvider
});
export { LiveQueryProvider, createLiveQueryProvider, LiveQueryProvider as default, useIsEnabled, useLiveQuery };
//# sourceMappingURL=index.js.map
