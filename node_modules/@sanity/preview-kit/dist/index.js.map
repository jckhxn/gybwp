{"version":3,"file":"index.js","sources":["../src/hooks.ts","../src/LiveQueryProvider/createLiveQueryProvider.tsx","../src/LiveQueryProvider/index.tsx"],"sourcesContent":["import type { QueryParams as ClientQueryParams } from '@sanity/client'\nimport { useCallback, useContext, useMemo, useState } from 'react'\nimport isFastEqual from 'react-fast-compare'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector'\n\nimport {\n  defineListenerContext,\n  IsEnabledContext,\n  LoadedListenersContext,\n} from './context'\nimport { getQueryCacheKey, useParams } from './utils'\n\n// Re-export types we use that are needed externally\nexport type { ClientQueryParams }\n\n/**\n * By default 'react-fast-compare' is used to check if the query result has changed.\n * It's reasonably fast, but you can make it even faster by providing your own function as you know which\n * part of the query result is visible to the user, and which parts can skip rendering.\n * @public\n */\nexport type isEqualFn<QueryResult> = (a: QueryResult, b: QueryResult) => boolean\n\n/** @public */\nexport interface LiveQueryHookOptions<QueryResult> {\n  isEqual?: isEqualFn<QueryResult>\n}\n\n/** @public */\nexport type QueryLoading = boolean\n\n/** @public */\nexport function useLiveQuery<\n  QueryResult,\n  QueryParams extends ClientQueryParams = ClientQueryParams,\n>(\n  initialData: QueryResult,\n  query: string,\n  queryParams?: QueryParams,\n  options?: LiveQueryHookOptions<QueryResult>,\n): [QueryResult, QueryLoading] {\n  const { isEqual = isFastEqual } = options || {}\n\n  const defineStore = useContext(defineListenerContext)\n  const params = useParams(queryParams)\n  const store = useMemo(\n    () => defineStore<QueryResult>(initialData, query, params),\n    [defineStore, initialData, params, query],\n  )\n  // initialSnapshot might change before hydration is done, so deep cloning it on the first hook call\n  // helps ensure that we don't get a mismatch between the server and client snapshots\n  const [serverSnapshot] = useState(() => {\n    if (initialData === undefined) {\n      throw new Error(\n        `initialSnapshot can't be undefined, if you don't want an initial value use null instead`,\n      )\n    }\n    try {\n      return JSON.parse(JSON.stringify(initialData))\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"Failed to deep clone initialSnapshot, this is likely an error and an indication that the snapshot isn't JSON serializable\",\n        { initialSnapshot: initialData, error },\n      )\n      return initialData\n    }\n  })\n  const getServerSnapshot = useCallback(() => serverSnapshot, [serverSnapshot])\n  const selector = useCallback((snapshot: QueryResult) => snapshot, [])\n\n  const snapshot = useSyncExternalStoreWithSelector(\n    store.subscribe,\n    store.getSnapshot,\n    getServerSnapshot,\n    selector,\n    isEqual,\n  )\n  const loading = useLiveQueryIsLoading(query, params)\n\n  return [snapshot, loading]\n}\n\n/**\n * Wether a particular query is loading or not.\n * @public\n */\nfunction useLiveQueryIsLoading(\n  query: string,\n  params: ClientQueryParams,\n): QueryLoading {\n  const loadedListeners = useContext(LoadedListenersContext)\n  const key = useMemo(() => getQueryCacheKey(query, params), [params, query])\n\n  return useMemo(() => {\n    if (Array.isArray(loadedListeners)) {\n      return loadedListeners.includes(key) ? false : true\n    }\n    return false\n  }, [key, loadedListeners])\n}\n\n/**\n * The `useLiveQuery` hook is designed to work in environments where the parent `LiveQueryProvider` may be lazy loaded.\n * Thus if it can't \"know\" if it's \"live\" or not, or of it will be later. When everything is setup correctly this is fine.\n * This hook on the other hand does know. If it returns `false` then sibling `useLiveQuery` hooks are not \"live\".\n * If it returns `true` then sibling `useLiveQuery` hooks are \"live\" as there is a parent `LiveQueryProvider` in the tree that is loaded and active.\n * @public\n */\nexport function useIsEnabled(): boolean {\n  return useContext(IsEnabledContext)\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { memo, Suspense, useEffect, useMemo, useState } from 'react'\n\nimport type { LiveQueryProviderProps, Logger } from '../types'\nimport { DEFAULT_MAX_DOCUMENTS, DEFAULT_TAG } from '../utils'\n\nexport type { LiveQueryProviderProps, Logger }\nexport type { CacheOptions } from '../types'\n\n/**\n * @internal\n */\nexport function createLiveQueryProvider(options: {\n  GroqStoreProvider: React.ComponentType<LiveQueryProviderProps>\n  LiveStoreProvider: React.ComponentType<LiveQueryProviderProps>\n}): React.ComponentType<LiveQueryProviderProps> {\n  const { GroqStoreProvider, LiveStoreProvider } = options\n\n  const SelectStoreProvider = memo((props: LiveQueryProviderProps) => {\n    const { children, refreshInterval, client, cache, logger } = props\n    const maxDocuments = cache?.maxDocuments ?? DEFAULT_MAX_DOCUMENTS\n    const [documentsCount, setDocumentsCount] = useState<number | null>(null)\n    const [error, setError] = useState<Error | null>(null)\n    const [includeTypes] = useState(() => cache?.includeTypes ?? [])\n\n    // Rethrow errors to the nearest error boundary\n    if (error) {\n      throw error\n    }\n\n    useEffect(() => {\n      if (documentsCount !== null) {\n        return\n      }\n\n      logger?.log('[@sanity/preview-kit]: fetch documents count')\n      const controller = new AbortController()\n      client\n        .fetch<number>(\n          includeTypes.length > 0\n            ? 'count(*[_type in $includeTypes])'\n            : 'count(*)',\n          { includeTypes },\n          { filterResponse: true, signal: controller.signal },\n        )\n        .then((result) => {\n          logger?.log('[@sanity/preview-kit]: documents count', result)\n          setDocumentsCount(result)\n        })\n        .catch((error) => {\n          if (error.name !== 'AbortError') {\n            setError(error)\n          }\n        })\n      return () => {\n        controller.abort()\n      }\n    }, [client, documentsCount, includeTypes, logger])\n\n    if (documentsCount === null) {\n      return children\n    }\n\n    if (refreshInterval && documentsCount >= maxDocuments) {\n      return (\n        <Suspense fallback={children}>\n          <LiveStoreProvider\n            client={client}\n            refreshInterval={refreshInterval}\n            turboSourceMap={false}\n            logger={logger}\n          >\n            {children}\n          </LiveStoreProvider>\n        </Suspense>\n      )\n    }\n\n    if (documentsCount >= maxDocuments) {\n      throw new Error(\n        `[@sanity/preview-kit]: You have ${documentsCount} documents in your dataset, which is more than the maximum of ${maxDocuments} documents. Please reduce the number of documents in your dataset or increase the limit.`,\n      )\n    }\n\n    return (\n      <Suspense fallback={children}>\n        <GroqStoreProvider {...props}>{children}</GroqStoreProvider>\n      </Suspense>\n    )\n  })\n  SelectStoreProvider.displayName = 'SelectStoreProvider'\n\n  const LiveQueryProvider = memo((props: LiveQueryProviderProps) => {\n    const { children, refreshInterval = 10000, token } = props\n\n    if (!props.client) {\n      throw new Error(\n        'Missing a `client` prop with a configured Sanity client instance',\n      )\n    }\n\n    // Ensure these values are stable even if userland isn't memoizing properly\n    const [client] = useState(() => {\n      const { requestTagPrefix, resultSourceMap } = props.client.config()\n      return props.client.withConfig({\n        requestTagPrefix: requestTagPrefix || DEFAULT_TAG,\n        resultSourceMap: resultSourceMap || 'withKeyArraySelector',\n        // Set the recommended defaults, this is a convenience to make it easier to share a client config from a server component to the client component\n        ...(token && {\n          token,\n          useCdn: false,\n          perspective: 'previewDrafts',\n          ignoreBrowserTokenWarning: true,\n        }),\n      })\n    })\n\n    const [cache] = useState(() => props.cache)\n    const [logger] = useState(() => props.logger)\n    const turboSourceMap = useMemo(() => {\n      const { resultSourceMap } = client.config()\n      return (\n        props.turboSourceMap ??\n        (resultSourceMap === 'withKeyArraySelector' || resultSourceMap)\n      )\n    }, [client, props.turboSourceMap])\n\n    if (turboSourceMap) {\n      return (\n        <Suspense fallback={children}>\n          <LiveStoreProvider\n            client={client}\n            logger={logger}\n            refreshInterval={refreshInterval}\n            turboSourceMap={turboSourceMap}\n          >\n            {children}\n          </LiveStoreProvider>\n        </Suspense>\n      )\n    }\n\n    return (\n      <Suspense fallback={children}>\n        <SelectStoreProvider\n          client={client}\n          cache={cache}\n          logger={logger}\n          refreshInterval={refreshInterval}\n        >\n          {children}\n        </SelectStoreProvider>\n      </Suspense>\n    )\n  })\n  LiveQueryProvider.displayName = 'LiveQueryProvider'\n\n  return LiveQueryProvider\n}\n","import { lazy } from 'react'\n\nimport { createLiveQueryProvider } from './createLiveQueryProvider'\n\nexport * from './createLiveQueryProvider'\n\nconst GroqStoreProvider = lazy(() => import('../GroqStoreProvider'))\nconst LiveStoreProvider = lazy(() => import('../LiveStoreProvider'))\n\n/** @public */\nexport const LiveQueryProvider = createLiveQueryProvider({\n  GroqStoreProvider,\n  LiveStoreProvider,\n})\n"],"names":["useLiveQuery","initialData","query","queryParams","options","isEqual","isFastEqual","defineStore","useContext","defineListenerContext","params","useParams","store","useMemo","serverSnapshot","useState","Error","JSON","parse","stringify","error","console","warn","initialSnapshot","getServerSnapshot","useCallback","selector","snapshot","useSyncExternalStoreWithSelector","subscribe","getSnapshot","loading","useLiveQueryIsLoading","loadedListeners","LoadedListenersContext","key","getQueryCacheKey","Array","isArray","includes","useIsEnabled","IsEnabledContext","createLiveQueryProvider","GroqStoreProvider","LiveStoreProvider","SelectStoreProvider","memo","props","_a","children","refreshInterval","client","cache","logger","maxDocuments","DEFAULT_MAX_DOCUMENTS","documentsCount","setDocumentsCount","setError","includeTypes","useEffect","log","controller","AbortController","fetch","length","filterResponse","signal","then","result","catch","name","abort","jsx","Suspense","fallback","turboSourceMap","concat","displayName","LiveQueryProvider","token","requestTagPrefix","resultSourceMap","config","withConfig","DEFAULT_TAG","useCdn","perspective","ignoreBrowserTokenWarning","lazy"],"mappings":"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"}