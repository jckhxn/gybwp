{"version":3,"file":"GroqStoreProvider.cjs","sources":["../../src/GroqStoreProvider/GroqStoreProvider.tsx"],"sourcesContent":["import type { QueryParams } from '@sanity/client'\nimport DefaultEventSource from '@sanity/eventsource'\nimport { type Config, groqStore } from '@sanity/groq-store'\nimport { memo, useEffect, useMemo, useState } from 'react'\n\nimport {\n  defineListenerContext as ListenerContext,\n  IsEnabledContext,\n  LoadedListenersContext,\n} from '../context'\nimport type {\n  DefineListenerContext,\n  ListenerGetSnapshot,\n  ListenerSubscribe,\n  LiveQueryProviderProps,\n  Logger,\n} from '../types'\nimport {\n  DEFAULT_MAX_DOCUMENTS,\n  getQueryCacheKey,\n  type QueryCacheKey,\n  useLoadingListenersContext,\n} from '../utils'\n\nexport type { LiveQueryProviderProps, Logger }\nexport type { CacheOptions } from '../types'\n\n/**\n * @public\n */\nexport interface GroqStoreProviderInternalProps extends Config {\n  children: React.ReactNode\n  /**\n   * @defaultValue true\n   */\n  listen?: boolean\n  /**\n   * @defaultValue true\n   */\n  overlayDrafts?: boolean\n  /**\n   * @defaultValue 3000\n   */\n  documentLimit?: number\n  logger?: Logger\n}\n/**\n * Caches the store instance, if the config changes you need to pass a new `key` prop to apply it and trigger a re-render\n * @public\n */\nconst GroqStoreProviderInternal = memo(function GroqStoreProvider(\n  props: GroqStoreProviderInternalProps,\n) {\n  const {\n    children,\n    logger,\n    // The rest is the store config\n    ...config\n  } = props\n\n  const [ready] = useState(() => new Set<QueryCacheKey>())\n  const [loadedListenersContext, updateLoadedListeners] =\n    useLoadingListenersContext(ready)\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const [snapshots] = useState(() => new Map<QueryCacheKey, any>())\n  const [store] = useState(() =>\n    groqStore({\n      // Override some of the store defaults\n      EventSource: props.token ? DefaultEventSource : undefined,\n      listen: true,\n      overlayDrafts: true,\n      documentLimit: DEFAULT_MAX_DOCUMENTS,\n      subscriptionThrottleMs: 1,\n      // Spread in the rest\n      ...config,\n    }),\n  )\n\n  const report = useMemo(() => {\n    if (config.listen) {\n      return `Updates are applied in real-time. The cache is set to max ${\n        config.documentLimit || DEFAULT_MAX_DOCUMENTS\n      } documents.`\n    }\n    return `Updates require a manual refresh. The cache is set to max ${\n      config.documentLimit || DEFAULT_MAX_DOCUMENTS\n    } documents.`\n  }, [config.documentLimit, config.listen])\n  useEffect(() => {\n    if (logger) {\n      logger.log(\n        `[@sanity/preview-kit]: With the current configuration you can expect that: ${report}`,\n      )\n    }\n  }, [logger, report])\n\n  // Make sure any async errors bubble up to the nearest error boundary\n  const [error, setError] = useState<unknown>(null)\n  // eslint-disable-next-line no-warning-comments\n  // @TODO can we just re throw inside the subscription itself?\n  if (error) throw error\n\n  const [listenerContext] = useState<DefineListenerContext>(() => {\n    return function defineListener<QueryResult>(\n      initialSnapshot: QueryResult,\n      query: string,\n      params: QueryParams,\n    ) {\n      const key = getQueryCacheKey(query, params)\n\n      // groq-store returns on subscriptions when the dataset haven't finished loading yet.\n      // We workaround this by setting the initial value as the one provided by the hook\n      if (!snapshots.has(key)) {\n        snapshots.set(key, initialSnapshot)\n      }\n\n      const subscribe: ListenerSubscribe = (onStoreChange) => {\n        if (!ready.has(key)) {\n          store.query(query, params).then((result) => {\n            if (!ready.has(key)) {\n              snapshots.set(key, result)\n\n              ready.add(key)\n              updateLoadedListeners()\n\n              onStoreChange()\n            }\n          }, setError)\n        }\n\n        if (!config.listen) {\n          // eslint-disable-next-line @typescript-eslint/no-empty-function\n          return () => {}\n        }\n\n        const subscription = store.subscribe(query, params, (err, result) => {\n          if (err) {\n            setError(err)\n            // Hold off on calling `onStoreChange` until we have a snapshot\n          } else if (ready.has(key)) {\n            snapshots.set(key, result)\n            onStoreChange()\n          }\n        })\n        return () => subscription.unsubscribe()\n      }\n      const getSnapshot: ListenerGetSnapshot<QueryResult> = () =>\n        snapshots.get(key)\n\n      return { subscribe, getSnapshot }\n    } satisfies DefineListenerContext\n  })\n\n  return (\n    <ListenerContext.Provider value={listenerContext}>\n      <LoadedListenersContext.Provider value={loadedListenersContext}>\n        <IsEnabledContext.Provider value>{children}</IsEnabledContext.Provider>\n      </LoadedListenersContext.Provider>\n    </ListenerContext.Provider>\n  )\n})\n\n/**\n * Handles live query updates using `@sanity/groq-store`\n * @internal\n */\nconst GroqStoreProvider = memo(function GroqStoreProvider(\n  props: LiveQueryProviderProps,\n) {\n  const { children, client, cache, logger } = props\n  const {\n    projectId,\n    dataset,\n    token,\n    // eslint-disable-next-line no-warning-comments\n    // @TODO @sanity/groq-store should handle `perspective` directly\n    perspective = 'previewDrafts',\n    requestTagPrefix,\n  } = useMemo(() => client.config(), [client])\n\n  return (\n    <GroqStoreProviderInternal\n      projectId={projectId!}\n      dataset={dataset!}\n      token={token}\n      logger={logger}\n      listen={cache?.listen ?? true}\n      documentLimit={cache?.maxDocuments}\n      overlayDrafts={perspective === 'previewDrafts'}\n      includeTypes={cache?.includeTypes}\n      requestTagPrefix={requestTagPrefix}\n    >\n      {children}\n    </GroqStoreProviderInternal>\n  )\n})\nGroqStoreProvider.displayName = 'GroqStoreProvider'\n\nexport default GroqStoreProvider\n"],"names":["GroqStoreProviderInternal","memo","GroqStoreProvider","props","children","logger","config","ready","useState","Set","loadedListenersContext","updateLoadedListeners","useLoadingListenersContext","snapshots","Map","store","groqStore","EventSource","token","DefaultEventSource","listen","overlayDrafts","documentLimit","DEFAULT_MAX_DOCUMENTS","subscriptionThrottleMs","report","useMemo","concat","useEffect","log","error","setError","listenerContext","defineListener","initialSnapshot","query","params","key","getQueryCacheKey","has","set","subscribe","onStoreChange","then","result","add","subscription","err","unsubscribe","getSnapshot","get","jsx","ListenerContext","Provider","value","LoadedListenersContext","IsEnabledContext","_a","client","cache","projectId","dataset","perspective","requestTagPrefix","maxDocuments","includeTypes","displayName","GroqStoreProvider2$1"],"mappings":"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"}